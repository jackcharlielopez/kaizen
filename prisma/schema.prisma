datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  paidSubscription Boolean?
  Student          Student[]
  invoice          invoice[]
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id        String   @id @default(uuid())
  name      String
  birthDate DateTime @db.Date
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  Report  Report[]
  invoice invoice[]
}

model Report {
  id          String   @id @default(uuid())
  studentId   String
  content     String
  createdAt   DateTime @default(now())
  elapsedTime Int

  student Student @relation(fields: [studentId], references: [id])
}

model invoice {
  studentId String
  userId    String
  cost      Int

  student Student @relation(fields: [studentId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, studentId])
}
